---
openapi: 3.0.0
info:
  title: For Wath? API
  description: La API REST del módulo de Desarrollo Pro Backend en Academlo es la herramienta perfecta para que los estudiantes de Front puedan interactuar de manera segura y eficiente con los diferentes features de la aplicación. Diseñada con los más altos estándares de seguridad y rendimiento, esta API permite a los estudiantes de Front probar todas las funcionalidades de la aplicación sin riesgos ni inconvenientes. Por otro lado, los estudiantes de Backend también podrán beneficiarse de esta API, ya que podrán utilizarla para verificar que las soluciones que desarrollen funcionen correctamente en un ambiente controlado y seguro. En resumen, la API REST del módulo de Desarrollo Pro Backend en Academlo es una herramienta esencial para todos los estudiantes que buscan aprender y mejorar sus habilidades en el desarrollo de aplicaciones web.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  contact:
    name: Ps3udoDev
    email: v.pseudo.11@gmail.com
servers:
  - url: http://localhost:9000/api/v1/
    description: Development server
tags:
  - name: Auth
    description: Refers to user authentication in the API. It includes all the operations related to the management of access tokens, registration of new users and authentication of existing users.
  - name: User
    description: It is in charge of managing the users in the API. Includes operations to modify and get users.
  - name: Publications Types
    description: Refers to the different types of posts found in the API. It includes obtaining and modifying the types of publications.
  - name: Countries
    description: It is in charge of obtaining all the countries registered in the API
  - name: States
    description: It is in charge of obtaining all the states registered in the API
  - name: Cities
    description: It is in charge of obtaining all the cities registered in the API
  - name: Roles
    description: It is in charge of obtaining all the roles registered in the API
paths:
  /auth/sign-up:
    post:
      tags:
        - Auth
      summary: allows you to register in the application
      description: The user sends his personal data (name, lastname, email and password) to be able to register as a user of the application
      operationId: authSignUp
      requestBody:
        description: parameters required to register in the system
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Sign-Up"
        required: true
      responses:
        "201":
          description: account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: string
                    example: Success Sign Up
                  errors:
                    type: array
                    items:
                      example: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "409":
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 409
                  name:
                    type: string
                    example: SequelizeUniqueConstraintError
                  message:
                    type: string
                    example: llave duplicada viola restricción de unicidad «users_email_key»
                  errors:
                    type: array
                    items:
                      example: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: allows you to access and use the app
      description: The user sends the email and his password to be able to receive a token with which he will make requests based on his ID
      operationId: authLogin
      requestBody:
        description: parameters required to login
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: correct credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Correct Credentials!
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        "400":
          description: Email not given or Password not provided for compare
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"
        "404":
          description: The user's email is not found in the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"
  /auth/me:
    get:
      security:
        - JWT: []
      tags:
        - Auth
      summary: allows you to retrieve your profile
      description: The user with his token will receive the Profiles associated with his account.
      operationId: authMe
      responses:
        "200":
          description: profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      id:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      email:
                        type: string
                      username:
                        type: string
                      image_url:
                        type: string
                      profiles:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            user_id:
                              type: string
                            role_id:
                              type: integer
                              example: 1
                            created_at:
                              type: string
                            updated_at:
                              type: string

        "401":
          description: Unauthorized
  /auth/forget-password:
    post:
      tags:
        - Auth
      summary: allows you to recover your password
      description: The user generates an email to recover his password in case he forgets it
      operationId: authForgetPasword
      requestBody:
        description: parameters required to generate a new password in case of forget password
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Forget-Password"
      responses:
        "200":
          description: Email sended!, check your inbox
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Email sended!, check your inbox
        "400":
          description: Wrong request email is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "404":
          description: the user's email is not found in the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"
  /auth/change-password/{token}:
    post:
      tags:
        - Auth
      summary: allows you to change your password
      description: The token is sent along with the password to make the password change
      operationId: authChangePassword
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: new password
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Change-Password"
        required: true
      responses:
        "200":
          description: update password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      message:
                        type: string
                        example: update success
        "400":
          description: Wrong request password is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"

  /users:
    get:
      security:
        - JWT: []
      tags:
        - User
      summary: allows to obtain the users
      description: Only for users who are administrators, users can be filtered based on their fields, and their data type will define the search rule
      operationId: userGetUser
      parameters:
        - name: id
          in: query
          description: retrieve users by id
          schema:
            type: string
        - name: first_name
          in: query
          description: retrieves the users associated with the entered characters referring to their first name
          schema:
            type: string
        - name: last_name
          in: query
          description: retrieves the users associated with the entered characters referring to their last name
          schema:
            type: string
        - name: email
          in: query
          description: retrieves the users associated with the entered characters referring to your mail
          schema:
            type: string
        - name: username
          in: query
          description: retrieves the users associated with the entered characters referring to their username
          schema:
            type: string
        - name: email_verified
          in: query
          description: search users by the date they verified their mail in relation to the current date
          schema:
            type: string
        - name: country_id
          in: query
          description: search for users by their country id
          schema:
            type: string
        - name: code_phone
          in: query
          description: search for users by phone code
          schema:
            type: string
        - name: phone
          in: query
          description: search for users by their phone number
          schema:
            type: string
        - name: created_at
          in: query
          description: search users by the date they created their account relative to the current date
          schema:
            type: string
        - name: size
          in: query
          description: number of results to return in each query
          schema:
            type: number
        - name: page
          in: query
          description: page on which the user will be located to obtain results
          schema:
            type: number
      responses:
        "200":
          description: returns users in a paginated manner
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      count:
                        type: number
                        example: 1
                      totalPages:
                        type: number
                        example: 1
                      currentPage:
                        type: number
                        example: 1
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 8ef2436b-8b3d-4927-a7b3-bd576eec42b2
                            first_name:
                              type: string
                              example: user
                            last_name:
                              type: string
                              example: user
                            email:
                              type: string
                              example: example@example@gmail.com
                            username:
                              type: string
                              example: example@example@gmail.com
                            email_verified:
                              type: string
                            code_phone:
                              type: string
                              example: +593
                            phone:
                              type: string
                              example: 123456789
                            image_url:
                              type: string
                            created_at:
                              type: string
                              example: 2023-03-21T12:55:11.024z
                            updated_at:
                              type: string
                              example: 2023-03-21T12:55:11.024Z
                            interests:
                              type: array
                              example: []

        "401":
          description: Unauthorized
  /users/{id}:
    get:
      security:
        - JWT: []
      tags:
        - User
      summary: It allows to obtain a user based on the Id
      description: Public information about a user will be seen, if the user looks at their same profile, they will be shown more complete fields
      operationId: userGetUserById
      parameters:
        - name: id
          in: path
          description: user id to search
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns user in paged form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 8ef2436b-8b3d-4927-a7b3-bd576eec42b2
                      first_name:
                        type: string
                        example: user
                      last_name:
                        type: string
                        example: user
                      country_id:
                        type: integer
                        example: 1
                      image_url:
                        type: string
                      interests:
                        type: array
                        example: []

        "401":
          description: Unauthorized
    put:
      security:
        - JWT: []
      tags:
        - User
      summary: The user will be able to edit their fields
      description: Only the same user can change their profile
      operationId: userPutUserById
      parameters:
        - name: id
          in: path
          description: user id to search
          required: true
          schema:
            type: string
      requestBody:
        description: You can edit the fields that do not compromise authentication
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                code_phone:
                  type: string
                country_id:
                  type: integer
                phone:
                  type: string
                interests:
                  type: string
                  example: 1,2,4 (tag ids separated by commas)
      responses:
        "200":
          description: returns users in a paginated manner
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 8ef2436b-8b3d-4927-a7b3-bd576eec42b2
                          first_name:
                            type: string
                            example: user
                          last_name:
                            type: string
                            example: user
                          email:
                            type: string
                            example: example@example@gmail.com
                          username:
                            type: string
                            example: example@example@gmail.com
                          password:
                            type: string
                            example: b$08$kx07j.y97XiyGaEQymM.eOLNJ
                          email_verified:
                            type: string
                          token:
                            type: string
                          code_phone:
                            type: string
                            example: +593
                          phone:
                            type: string
                            example: 123456789
                          country_id:
                            type: integer
                            example: 1
                          image_url:
                            type: string
                          created_at:
                            type: string
                            example: 2023-03-21T12:55:11.024z
                          updated_at:
                            type: string
                            example: 2023-03-21T12:55:11.024Z
        "401":
          description: Unauthorized
        "403":
          description: action forbidden for this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorName:
                    type: string
                    example: Bad Request
                  message: 
                    type: string
                    example: Unauthorized
        "404":
          description: the user's email is not found in the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorName"
  /users/{id}/votes:
    get:
      security:
        - JWT: []
      tags:
        - User
      summary: The votes made by the users will be seen
      description: The votes made by users will be seen in the publications where they have voted
      operationId: userGetVotes
      parameters:
        - name: id
          in: path
          description: User ID to search the votes
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: number of results to return in each query
          schema:
            type: number
        - name: page
          in: query
          description: page on which the user will be located to obtain results
          schema:
            type: number
      responses:
        "200":
          description: returns user in paged form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      count:
                        type: number
                        example: 1
                      totalPages:
                        type: number
                        example: 1
                      currentPage:
                        type: number
                        example: 1
                      results:
                        type: array
                        example: []

        "401":
          description: Unauthorized
  /users/{id}/publications:
    get:
      security:
        - JWT: []
      tags:
        - User
      summary: Posts made by users will be seen
      description: Publications that the user has made
      operationId: userGetPublications
      parameters:
        - name: id
          in: path
          description: User ID to search the votes
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: number of results to return in each query
          schema:
            type: number
        - name: page
          in: query
          description: page on which the user will be located to obtain results
          schema:
            type: number
      responses:
        "200":
          description: returns user posts in paginated form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      count:
                        type: number
                        example: 1
                      totalPages:
                        type: number
                        example: 1
                      currentPage:
                        type: number
                        example: 1
                      results:
                        type: array
                        example: []
        "401":
          description: Unauthorized
        "404":
          description: the user id does not belong to a valid user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Not found User
                  errorName:
                    type: string
                    example: Bad Request
  /users/{id}/add-image:
    post:
      security:
        - JWT: []
      tags:
        - User
      summary: The user will be able to upload an image
      description: The user will send an image that will be saved in the chosen service (aws, firebase…)
      operationId: userPostImage
      parameters:
        - name: id
          in: path
          description: User ID to upload profile picture
          required: true
          schema:
            type: string
      requestBody:
        description: You can edit the fields that do not compromise authentication
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: upload the image correctly to the cloud
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Image Added
        "403":
          description: the user trying to send the request is not authorized to access this resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: forbidden
                  errorName:
                    type: string
                    example: Bad Request
        "404":
          description: the user you are trying to access does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Not found user
                  errorName:
                    type: string
                    example: Bad Request
  /users/{id}/remove-image:
    delete:
      security:
        - JWT: []
      tags:
        - User
      summary: The user will be able to delete his profile picture
      description: The user will have the option to remove the image from the service (aws, firebase...)
      operationId: userDeleteImage
      parameters:
        - name: id
          in: path
          description: User ID to remove profile picture
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Image Removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Image Removed
        "403":
          description: The user you are trying to access is not yours, only the administrators or the user himself can make this request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: forbidden
                  errorName:
                    type: string
                    example: Bad Request
        "404":
          description: the user you are trying to access does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Not found user
                  errorName:
                    type: string
                    example: Bad Request
  /publications-types:
    get:
      security:
        - JWT: []
      tags:
        - Publications Types
      summary: allows to obtain the types of publications
      description: Publication types can be filtered based on their fields, and their data type will define the search rule
      operationId: publications-typesGetAll
      parameters:
        - name: size
          in: query
          description: number of results to return in each query
          schema:
            type: number
        - name: page
          in: query
          description: page on which the user will be located to obtain results
          schema:
            type: number
        - name: id
          in: query
          description: id for user search using query
          schema:
            type: string
        - name: name
          in: query
          description: name for user search using query
          schema:
            type: string
        - name: description
          in: query
          description: description for user search using query
          schema:
            type: string
      responses:
        "200":
          description: returns users in a paginated manner
          content:
            application/json:
              schema:
                properties:
                  results:
                    type: object
                    properties:
                      count:
                        type: number
                        example: 1
                      totalPages:
                        type: number
                        example: 1
                      currentPage:
                        type: number
                        example: 1
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                            description:
                              type: string
                            created_at:
                              type: string
                              example: 2023-04-03T21:54:13.301Z
                            updated_at:
                              type: string
                              example: 2023-04-03T21:54:13.301Z
        "401":
          description: Unauthorized
  /publications-types/{id}:
    get:
      security:
        - JWT: []
      tags:
        - Publications Types
      summary: allows to obtain the types of publications
      description: Publication types can be filtered based on their fields, and their data type will define the search rule
      operationId: publications_typesGetAll
      parameters:
        - name: id
          in: path
          description: id for user search using query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns users in a paginated manner
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                  description:
                    type: string
                  created_at:
                    type: string
                    example: 2023-04-03T21:54:13.301Z
                  updated_at:
                    type: string
                    example: 2023-04-03T21:54:13.301Z
        "401":
          description: Unauthorized
        "404":
          description: Not found Publication Type
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Not found Publication Type
                  errorName:
                    type: string
                    example: Not Found
    put:
      security:
        - JWT: []
      tags:
        - Publications Types
      summary: allows you to modify a type of publication
      description: Alter existing fields
      operationId: putPublicationsTypes
      parameters:
        - name: id
          in: path
          description: id for user search using query
          required: true
          schema:
            type: string
      requestBody:
        description: You can alter existing fields
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        required: true
      responses:
        "200":
          description: was successfully modified
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Success Update
        "401": 
          description: Unauthorized
        "404":
          description: post type not found or missing fields to fill
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: post type not found or missing fields to fill
                  errorName:
                    type: string
                    example: Bad request
  /countries:
    get:
      security:
        - JWT: []
      tags:
        - Countries
      summary: allows you to obtain the available countries
      description: Paginated view of all countries in the app
      operationId: getCountries
      responses:
        "200":
          description: returns countries in paginated form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      countries:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 1
                          rows:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
        "401":
          description: Unauthorized
  /states:
    get:
      security:
        - JWT: []
      tags:
        - States
      summary: allows you to obtain the available states
      description: Paginated view of all states in the app
      operationId: getStates
      responses:
        "200":
          description: returns states in paginated form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      states:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 1
                          rows:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                country_id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
        "401":
          description: Unauthorized
  /cities:
    get:
      security:
        - JWT: []
      tags:
        - Cities
      summary: allows you to obtain the available cities
      description: Paginated view of all Cities in the app
      operationId: getCities
      responses:
        "200":
          description: returns cities in paginated form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      cities:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 1
                          rows:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                state_id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
        "401":
          description: Unauthorized
  /roles:
    get:
      security:
        - JWT: []
      tags:
        - Roles
      summary: allows you to obtain the available roles
      description: Paginated view of all Roles in the app
      operationId: getRoles
      responses:
        "200":
          description: returns roles in paginated form
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      roles:
                        type: object
                        properties:
                          count:
                            type: integer
                            example: 1
                          rows:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
                                  example: public
        "401":
          description: Unauthorized
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    token:
      name: token
      in: path
      description: token sent to mail
      required: true
      schema:
        type: string
    usersQuerys:
      name: id
      in: query
      description: id for user search using query
      schema:
        type: string

  schemas:
    Sign-Up:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    Forget-Password:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: example@example.com
    Change-Password:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    SchemaValidationError:
      type: object
      properties:
        message:
          type: string
          example: Schema Validation Error
        errorName:
          type: string
          example: Bad Request
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: \"*\" is required
              path:
                type: array
                items:
                  type: string
                  example: "*"
              type:
                type: string
                example: any.required
              context:
                type: object
                properties:
                  label:
                    type: string
                    example: label
                  key:
                    type: string
                    example: key
    errorName:
      type: object
      properties:
        message:
          type: string
          example: description of error
        errorName:
          type: string
          example: name of error
